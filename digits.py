# -*- coding: utf-8 -*-
"""digits.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mb94-PLwxYcN7GupUdnSqPiAV3gwUKtL
"""

# Commented out IPython magic to ensure Python compatibility.
import tensorflow as tf
from tensorflow import keras
import matplotlib.pyplot as plt
# %matplotlib inline
import numpy as np

(x_train, y_train), (x_test, y_test) = keras.datasets.mnist.load_data()

len(x_train)

len(x_test)

x_train[0].shape

x_train[0]

plt.matshow(x_train[2])

y_train[2]

x_train.shape

x_train = x_train/255

x_test = x_test/255

x_train_flattened = x_train.reshape(len(x_train),28*28)

x_train_flattened.shape

x_test_flattened = x_test.reshape(len(x_test),28*28)

x_test_flattened.shape

model = keras.Sequential([
    keras.layers.Dense(10, input_shape=(784,),activation='sigmoid')
])

model.compile(
    optimizer='adam',
    loss='sparse_categorical_crossentropy',
    metrics = ['accuracy']
  )

model.fit(x_train_flattened, y_train, epochs=5)

model.evaluate(x_test_flattened, y_test)

plt.matshow(x_test[50])

y_predicted = model.predict(x_test_flattened)
y_predicted[50]

np.argmax(y_predicted[50])



model = keras.Sequential([
    keras.layers.Dense(100, input_shape=(784,),activation='relu'),
    keras.layers.Dense(10,activation='sigmoid')
])

model.compile(
    optimizer='adam',
    loss='sparse_categorical_crossentropy',
    metrics = ['accuracy']
  )

model.fit(x_train_flattened, y_train, epochs=5)

model.evaluate(x_test_flattened,y_test)

import seaborn as sn
y_predicted = model.predict(x_test_flattened)
y_predicted_labels = [np.argmax(i) for i in y_predicted]
cm = tf.math.confusion_matrix(labels = y_test, predictions = y_predicted_labels)

plt.figure(figsize=(10,7))
sn.heatmap(cm,annot=True,fmt='d')
plt.xlabel('Predicted')
plt.ylabel('Truth')

